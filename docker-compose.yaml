services:
  frontend:
    build: ./frontend
    environment:
      - VITE_API_URL=https://api.${DOMAIN}
    networks:
      - app-network

  api:
    build: ./job-listings-api
    environment:
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      - CORS_ORIGINS=https://${DOMAIN}
      - SCRAPER_SCHEDULE=*/60  # Run scraper every 60 minutes
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  caddy:
    build: 
      context: .
      dockerfile: Dockerfile.caddy
    ports:
      - "443:443"  # Only expose HTTPS port
    volumes:
      - caddy_data:/data
      - caddy_config:/config
      - ./Caddyfile.template:/etc/caddy/Caddyfile.template  # Note the .template extension
      - ./docker-entrypoint.sh:/docker-entrypoint.sh:ro,Z
    environment:
      - DOMAIN
      - API_DOMAIN=api.${DOMAIN}
    networks:
      - app-network
    restart: unless-stopped  # Add restart policy for reliability

volumes:
  postgres_data:
  caddy_data:
  caddy_config:

networks:
  app-network: